package vest.doctor.workflow;

import java.util.Optional;
import java.util.concurrent.Flow;

/**
 * An event signal emitted in a workflow.
 */
public interface Signal<IN, OUT> {

    /**
     * The type of the signal emitted.
     */
    enum Type {
        SUBSCRIBED, VALUE, ERROR, COMPLETED, REQUESTED, CANCELED
    }

    /**
     * The type of the signal.
     *
     * @see Type
     */
    Type type();

    /**
     * For {@link Type#VALUE} signals, the value that was emitted from the upstream publisher. For other
     * type signals this will be null.
     */
    IN value();

    /**
     * For {@link Type#ERROR} signals, the error that was generated by the workflow. For other type
     * signals this will be null.
     */
    Throwable error();

    /**
     * The subscription for the workflow.
     */
    Flow.Subscription subscription();

    /**
     * For {@link Type#REQUESTED} signals, the number of elements requested by the downstream subscriber.
     * For other type signals, this will be -1.
     */
    long requested();

    /**
     * The downstream subscriber.
     */
    Optional<Flow.Subscriber<OUT>> downstream();

    /**
     * Perform the default action for this signal type. In general the default action will be to delegate
     * to the appropriate {@link Flow.Subscriber} or {@link Flow.Subscription} method.
     */
    void doDefaultAction();
}
